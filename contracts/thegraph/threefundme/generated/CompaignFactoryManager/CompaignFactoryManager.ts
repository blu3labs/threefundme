// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CompaignContributionReceived extends ethereum.Event {
  get params(): CompaignContributionReceived__Params {
    return new CompaignContributionReceived__Params(this);
  }
}

export class CompaignContributionReceived__Params {
  _event: CompaignContributionReceived;

  constructor(event: CompaignContributionReceived) {
    this._event = event;
  }

  get compaign(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contributor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CompaignCreated extends ethereum.Event {
  get params(): CompaignCreated__Params {
    return new CompaignCreated__Params(this);
  }
}

export class CompaignCreated__Params {
  _event: CompaignCreated;

  constructor(event: CompaignCreated) {
    this._event = event;
  }

  get compaign(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CompaignFactoryManager extends ethereum.SmartContract {
  static bind(address: Address): CompaignFactoryManager {
    return new CompaignFactoryManager("CompaignFactoryManager", address);
  }

  allowedTokensCurrency(param0: Address): boolean {
    let result = super.call(
      "allowedTokensCurrency",
      "allowedTokensCurrency(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowedTokensCurrency(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedTokensCurrency",
      "allowedTokensCurrency(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  compaignValid(param0: Address): boolean {
    let result = super.call("compaignValid", "compaignValid(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_compaignValid(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "compaignValid",
      "compaignValid(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  compaignsOfOwner(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "compaignsOfOwner",
      "compaignsOfOwner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_compaignsOfOwner(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "compaignsOfOwner",
      "compaignsOfOwner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contributionsOfCompaign(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "contributionsOfCompaign",
      "contributionsOfCompaign(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_contributionsOfCompaign(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contributionsOfCompaign",
      "contributionsOfCompaign(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contributionsOfUsers(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "contributionsOfUsers",
      "contributionsOfUsers(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_contributionsOfUsers(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contributionsOfUsers",
      "contributionsOfUsers(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factories(param0: Address): boolean {
    let result = super.call("factories", "factories(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_factories(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("factories", "factories(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fees(param0: Address): BigInt {
    let result = super.call("fees", "fees(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_fees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fees", "fees(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllCompaigns(): Array<Address> {
    let result = super.call(
      "getAllCompaigns",
      "getAllCompaigns():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllCompaigns(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllCompaigns",
      "getAllCompaigns():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllCompaignsByStartEnd(start: BigInt, end: BigInt): Array<Address> {
    let result = super.call(
      "getAllCompaignsByStartEnd",
      "getAllCompaignsByStartEnd(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getAllCompaignsByStartEnd(
    start: BigInt,
    end: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllCompaignsByStartEnd",
      "getAllCompaignsByStartEnd(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllContributionsByCompaign(compaign: Address): Array<Address> {
    let result = super.call(
      "getAllContributionsByCompaign",
      "getAllContributionsByCompaign(address):(address[])",
      [ethereum.Value.fromAddress(compaign)]
    );

    return result[0].toAddressArray();
  }

  try_getAllContributionsByCompaign(
    compaign: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllContributionsByCompaign",
      "getAllContributionsByCompaign(address):(address[])",
      [ethereum.Value.fromAddress(compaign)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllContributionsByCompaignByStartEnd(
    compaign: Address,
    start: BigInt,
    end: BigInt
  ): Array<Address> {
    let result = super.call(
      "getAllContributionsByCompaignByStartEnd",
      "getAllContributionsByCompaignByStartEnd(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(compaign),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getAllContributionsByCompaignByStartEnd(
    compaign: Address,
    start: BigInt,
    end: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllContributionsByCompaignByStartEnd",
      "getAllContributionsByCompaignByStartEnd(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(compaign),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllContributionsByUser(user: Address): Array<Address> {
    let result = super.call(
      "getAllContributionsByUser",
      "getAllContributionsByUser(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toAddressArray();
  }

  try_getAllContributionsByUser(
    user: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllContributionsByUser",
      "getAllContributionsByUser(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllContributionsByUserByStartEnd(
    user: Address,
    start: BigInt,
    end: BigInt
  ): Array<Address> {
    let result = super.call(
      "getAllContributionsByUserByStartEnd",
      "getAllContributionsByUserByStartEnd(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getAllContributionsByUserByStartEnd(
    user: Address,
    start: BigInt,
    end: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllContributionsByUserByStartEnd",
      "getAllContributionsByUserByStartEnd(address,uint256,uint256):(address[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownersOfCompaign(param0: Address): Address {
    let result = super.call(
      "ownersOfCompaign",
      "ownersOfCompaign(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_ownersOfCompaign(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownersOfCompaign",
      "ownersOfCompaign(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userContributionIndex(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userContributionIndex",
      "userContributionIndex(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userContributionIndex(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userContributionIndex",
      "userContributionIndex(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class RegisterCompaignCall extends ethereum.Call {
  get inputs(): RegisterCompaignCall__Inputs {
    return new RegisterCompaignCall__Inputs(this);
  }

  get outputs(): RegisterCompaignCall__Outputs {
    return new RegisterCompaignCall__Outputs(this);
  }
}

export class RegisterCompaignCall__Inputs {
  _call: RegisterCompaignCall;

  constructor(call: RegisterCompaignCall) {
    this._call = call;
  }

  get compaign(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterCompaignCall__Outputs {
  _call: RegisterCompaignCall;

  constructor(call: RegisterCompaignCall) {
    this._call = call;
  }
}

export class RegisterContributionUserCall extends ethereum.Call {
  get inputs(): RegisterContributionUserCall__Inputs {
    return new RegisterContributionUserCall__Inputs(this);
  }

  get outputs(): RegisterContributionUserCall__Outputs {
    return new RegisterContributionUserCall__Outputs(this);
  }
}

export class RegisterContributionUserCall__Inputs {
  _call: RegisterContributionUserCall;

  constructor(call: RegisterContributionUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get compaign(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterContributionUserCall__Outputs {
  _call: RegisterContributionUserCall;

  constructor(call: RegisterContributionUserCall) {
    this._call = call;
  }
}

export class RemoveContributionUserCall extends ethereum.Call {
  get inputs(): RemoveContributionUserCall__Inputs {
    return new RemoveContributionUserCall__Inputs(this);
  }

  get outputs(): RemoveContributionUserCall__Outputs {
    return new RemoveContributionUserCall__Outputs(this);
  }
}

export class RemoveContributionUserCall__Inputs {
  _call: RemoveContributionUserCall;

  constructor(call: RemoveContributionUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get compaign(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveContributionUserCall__Outputs {
  _call: RemoveContributionUserCall;

  constructor(call: RemoveContributionUserCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAllowedTokenCurrencyCall extends ethereum.Call {
  get inputs(): SetAllowedTokenCurrencyCall__Inputs {
    return new SetAllowedTokenCurrencyCall__Inputs(this);
  }

  get outputs(): SetAllowedTokenCurrencyCall__Outputs {
    return new SetAllowedTokenCurrencyCall__Outputs(this);
  }
}

export class SetAllowedTokenCurrencyCall__Inputs {
  _call: SetAllowedTokenCurrencyCall;

  constructor(call: SetAllowedTokenCurrencyCall) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAllowedTokenCurrencyCall__Outputs {
  _call: SetAllowedTokenCurrencyCall;

  constructor(call: SetAllowedTokenCurrencyCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }

  get fac(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this);
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this);
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
