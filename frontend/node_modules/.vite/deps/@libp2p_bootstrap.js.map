{
  "version": 3,
  "sources": ["../../@libp2p/bootstrap/src/index.ts"],
  "sourcesContent": ["/**\n * @packageDocumentation\n *\n * The configured bootstrap peers will be discovered after the configured timeout. This will ensure there are some peers in the peer store for the node to use to discover other peers.\n *\n * They will be tagged with a tag with the name `'bootstrap'` tag, the value `50` and it will expire after two minutes which means the nodes connections may be closed if the maximum number of connections is reached.\n *\n * Clients that need constant connections to bootstrap nodes (e.g. browsers) can set the TTL to `Infinity`.\n *\n * ```JavaScript\n * import { createLibp2p } from 'libp2p'\n * import { bootstrap } from '@libp2p/bootstrap'\n * import { tcp } from 'libp2p/tcp'\n * import { noise } from '@libp2p/noise'\n * import { mplex } from '@libp2p/mplex'\n *\n * let options = {\n *   transports: [\n *     tcp()\n *   ],\n *   streamMuxers: [\n *     mplex()\n *   ],\n *   connectionEncryption: [\n *     noise()\n *   ],\n *   peerDiscovery: [\n *     bootstrap({\n *       list: [ // a list of bootstrap peer multiaddrs to connect to on node startup\n *         \"/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ\",\n *         \"/dnsaddr/bootstrap.libp2p.io/ipfs/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN\",\n *         \"/dnsaddr/bootstrap.libp2p.io/ipfs/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa\"\n *       ],\n *       timeout: 1000, // in ms,\n *       tagName: 'bootstrap',\n *       tagValue: 50,\n *       tagTTL: 120000 // in ms\n *     })\n *   ]\n * }\n *\n * const libp2p = await createLibp2p(options)\n *\n * libp2p.on('peer:discovery', function (peerId) {\n *   console.log('found peer: ', peerId.toB58String())\n * })\n * ```\n */\n\nimport { TypedEventEmitter } from '@libp2p/interface/events'\nimport { peerDiscovery } from '@libp2p/interface/peer-discovery'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { P2P } from '@multiformats/mafmt'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport type { PeerDiscovery, PeerDiscoveryEvents } from '@libp2p/interface/peer-discovery'\nimport type { PeerInfo } from '@libp2p/interface/peer-info'\nimport type { PeerStore } from '@libp2p/interface/peer-store'\nimport type { Startable } from '@libp2p/interface/startable'\n\nconst log = logger('libp2p:bootstrap')\n\nconst DEFAULT_BOOTSTRAP_TAG_NAME = 'bootstrap'\nconst DEFAULT_BOOTSTRAP_TAG_VALUE = 50\nconst DEFAULT_BOOTSTRAP_TAG_TTL = 120000\nconst DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT = 1000\n\nexport interface BootstrapInit {\n  /**\n   * The list of peer addresses in multi-address format\n   */\n  list: string[]\n\n  /**\n   * How long to wait before discovering bootstrap nodes\n   */\n  timeout?: number\n\n  /**\n   * Tag a bootstrap peer with this name before \"discovering\" it (default: 'bootstrap')\n   */\n  tagName?: string\n\n  /**\n   * The bootstrap peer tag will have this value (default: 50)\n   */\n  tagValue?: number\n\n  /**\n   * Cause the bootstrap peer tag to be removed after this number of ms (default: 2 minutes)\n   */\n  tagTTL?: number\n}\n\nexport interface BootstrapComponents {\n  peerStore: PeerStore\n}\n\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends TypedEventEmitter<PeerDiscoveryEvents> implements PeerDiscovery, Startable {\n  static tag = 'bootstrap'\n\n  private timer?: ReturnType<typeof setTimeout>\n  private readonly list: PeerInfo[]\n  private readonly timeout: number\n  private readonly components: BootstrapComponents\n  private readonly _init: BootstrapInit\n\n  constructor (components: BootstrapComponents, options: BootstrapInit = { list: [] }) {\n    if (options.list == null || options.list.length === 0) {\n      throw new Error('Bootstrap requires a list of peer addresses')\n    }\n    super()\n\n    this.components = components\n    this.timeout = options.timeout ?? DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT\n    this.list = []\n\n    for (const candidate of options.list) {\n      if (!P2P.matches(candidate)) {\n        log.error('Invalid multiaddr')\n        continue\n      }\n\n      const ma = multiaddr(candidate)\n      const peerIdStr = ma.getPeerId()\n\n      if (peerIdStr == null) {\n        log.error('Invalid bootstrap multiaddr without peer id')\n        continue\n      }\n\n      const peerData: PeerInfo = {\n        id: peerIdFromString(peerIdStr),\n        multiaddrs: [ma],\n        protocols: []\n      }\n\n      this.list.push(peerData)\n    }\n\n    this._init = options\n  }\n\n  readonly [peerDiscovery] = this\n\n  readonly [Symbol.toStringTag] = '@libp2p/bootstrap'\n\n  isStarted (): boolean {\n    return Boolean(this.timer)\n  }\n\n  /**\n   * Start emitting events\n   */\n  start (): void {\n    if (this.isStarted()) {\n      return\n    }\n\n    log('Starting bootstrap node discovery, discovering peers after %s ms', this.timeout)\n    this.timer = setTimeout(() => {\n      void this._discoverBootstrapPeers()\n        .catch(err => {\n          log.error(err)\n        })\n    }, this.timeout)\n  }\n\n  /**\n   * Emit each address in the list as a PeerInfo\n   */\n  async _discoverBootstrapPeers (): Promise<void> {\n    if (this.timer == null) {\n      return\n    }\n\n    for (const peerData of this.list) {\n      await this.components.peerStore.merge(peerData.id, {\n        tags: {\n          [this._init.tagName ?? DEFAULT_BOOTSTRAP_TAG_NAME]: {\n            value: this._init.tagValue ?? DEFAULT_BOOTSTRAP_TAG_VALUE,\n            ttl: this._init.tagTTL ?? DEFAULT_BOOTSTRAP_TAG_TTL\n          }\n        }\n      })\n\n      // check we are still running\n      if (this.timer == null) {\n        return\n      }\n\n      this.safeDispatchEvent('peer', { detail: peerData })\n    }\n  }\n\n  /**\n   * Stop emitting events\n   */\n  stop (): void {\n    if (this.timer != null) {\n      clearTimeout(this.timer)\n    }\n\n    this.timer = undefined\n  }\n}\n\nexport function bootstrap (init: BootstrapInit): (components: BootstrapComponents) => PeerDiscovery {\n  return (components: BootstrapComponents) => new Bootstrap(components, init)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AA4DA,IAAM,MAAM,OAAO,kBAAkB;AAErC,IAAM,6BAA6B;AACnC,IAAM,8BAA8B;AACpC,IAAM,4BAA4B;AAClC,IAAM,sCAAsC;AAjE5C;AAqGA,IAAM,YAAN,cAAwB,kBAAsC;EAS5D,YAAa,YAAiC,UAAyB,EAAE,MAAM,CAAA,EAAE,GAAE;AACjF,QAAI,QAAQ,QAAQ,QAAQ,QAAQ,KAAK,WAAW,GAAG;AACrD,YAAM,IAAI,MAAM,6CAA6C;;AAE/D,UAAK;AAVC;AACS;AACA;AACA;AACA;AAsCR,wBAAC,IAAiB;AAElB,wBAAC,IAAsB;AAhC9B,SAAK,aAAa;AAClB,SAAK,UAAU,QAAQ,WAAW;AAClC,SAAK,OAAO,CAAA;AAEZ,eAAW,aAAa,QAAQ,MAAM;AACpC,UAAI,CAAC,IAAI,QAAQ,SAAS,GAAG;AAC3B,YAAI,MAAM,mBAAmB;AAC7B;;AAGF,YAAM,KAAK,UAAU,SAAS;AAC9B,YAAM,YAAY,GAAG,UAAS;AAE9B,UAAI,aAAa,MAAM;AACrB,YAAI,MAAM,6CAA6C;AACvD;;AAGF,YAAM,WAAqB;QACzB,IAAI,iBAAiB,SAAS;QAC9B,YAAY,CAAC,EAAE;QACf,WAAW,CAAA;;AAGb,WAAK,KAAK,KAAK,QAAQ;;AAGzB,SAAK,QAAQ;EACf;EAMA,YAAS;AACP,WAAO,QAAQ,KAAK,KAAK;EAC3B;;;;EAKA,QAAK;AACH,QAAI,KAAK,UAAS,GAAI;AACpB;;AAGF,QAAI,oEAAoE,KAAK,OAAO;AACpF,SAAK,QAAQ,WAAW,MAAK;AAC3B,WAAK,KAAK,wBAAuB,EAC9B,MAAM,SAAM;AACX,YAAI,MAAM,GAAG;MACf,CAAC;IACL,GAAG,KAAK,OAAO;EACjB;;;;EAKA,MAAM,0BAAuB;AAC3B,QAAI,KAAK,SAAS,MAAM;AACtB;;AAGF,eAAW,YAAY,KAAK,MAAM;AAChC,YAAM,KAAK,WAAW,UAAU,MAAM,SAAS,IAAI;QACjD,MAAM;UACJ,CAAC,KAAK,MAAM,WAAW,0BAA0B,GAAG;YAClD,OAAO,KAAK,MAAM,YAAY;YAC9B,KAAK,KAAK,MAAM,UAAU;;;OAG/B;AAGD,UAAI,KAAK,SAAS,MAAM;AACtB;;AAGF,WAAK,kBAAkB,QAAQ,EAAE,QAAQ,SAAQ,CAAE;;EAEvD;;;;EAKA,OAAI;AACF,QAAI,KAAK,SAAS,MAAM;AACtB,mBAAa,KAAK,KAAK;;AAGzB,SAAK,QAAQ;EACf;;AA7DU,oBAEA,YAAO;AA9CjB,cADI,WACG,OAAM;AA4GT,SAAU,UAAW,MAAmB;AAC5C,SAAO,CAAC,eAAoC,IAAI,UAAU,YAAY,IAAI;AAC5E;",
  "names": []
}
