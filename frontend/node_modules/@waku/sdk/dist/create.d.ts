import type { GossipSub } from "@chainsafe/libp2p-gossipsub";
import type { PeerDiscovery } from "@libp2p/interface/peer-discovery";
import { WakuOptions } from "@waku/core";
import type { FullNode, Libp2p, Libp2pComponents, LightNode, ProtocolCreateOptions, RelayNode } from "@waku/interfaces";
import { RelayCreateOptions } from "@waku/relay";
import { Libp2pOptions } from "libp2p";
export { Libp2pComponents };
/**
 * Create a Waku node that uses Waku Light Push, Filter and Store to send and
 * receive messages, enabling low resource consumption.
 * Uses Waku Filter V2 by default.
 */
export declare function createLightNode(options?: ProtocolCreateOptions & WakuOptions): Promise<LightNode>;
/**
 * Create a Waku node that uses Waku Relay to send and receive messages,
 * enabling some privacy preserving properties.
 */
export declare function createRelayNode(options?: ProtocolCreateOptions & WakuOptions & Partial<RelayCreateOptions>): Promise<RelayNode>;
/**
 * Create a Waku node that uses all Waku protocols.
 *
 * This helper is not recommended except if:
 * - you are interfacing with nwaku v0.11 or below
 * - you are doing some form of testing
 *
 * If you are building a full node, it is recommended to use
 * [nwaku](github.com/status-im/nwaku) and its JSON RPC API or wip REST API.
 *
 * @see https://github.com/status-im/nwaku/issues/1085
 * @internal
 */
export declare function createFullNode(options?: ProtocolCreateOptions & WakuOptions & Partial<RelayCreateOptions>): Promise<FullNode>;
export declare function defaultPeerDiscoveries(): ((components: Libp2pComponents) => PeerDiscovery)[];
type PubsubService = {
    pubsub?: (components: Libp2pComponents) => GossipSub;
};
export declare function defaultLibp2p(wakuGossipSub?: PubsubService["pubsub"], options?: Partial<Libp2pOptions>, userAgent?: string): Promise<Libp2p>;
