import { unmarshalPrivateKey, unmarshalPublicKey } from "@libp2p/crypto/keys";
import { supportedKeys } from "@libp2p/crypto/keys";
import { peerIdFromKeys } from "@libp2p/peer-id";
export function createPeerIdFromPublicKey(publicKey) {
    const _publicKey = new supportedKeys.secp256k1.Secp256k1PublicKey(publicKey);
    return peerIdFromKeys(_publicKey.bytes, undefined);
}
export function getPublicKeyFromPeerId(peerId) {
    if (peerId.type !== "secp256k1") {
        throw new Error("Unsupported peer id type");
    }
    return unmarshalPublicKey(peerId.publicKey).marshal();
}
// Only used in tests
export async function getPrivateKeyFromPeerId(peerId) {
    if (peerId.type !== "secp256k1") {
        throw new Error("Unsupported peer id type");
    }
    if (!peerId.privateKey) {
        throw new Error("Private key not present on peer id");
    }
    const privateKey = await unmarshalPrivateKey(peerId.privateKey);
    return privateKey.marshal();
}
//# sourceMappingURL=peer_id.js.map