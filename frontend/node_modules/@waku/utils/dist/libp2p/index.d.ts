import type { Connection } from "@libp2p/interface/connection";
import type { PeerId } from "@libp2p/interface/peer-id";
import type { Peer, PeerStore } from "@libp2p/interface/peer-store";
/**
 * Returns a pseudo-random peer that supports the given protocol.
 * Useful for protocols such as store and light push
 */
export declare function selectRandomPeer(peers: Peer[]): Peer | undefined;
/**
 * Returns the peer with the lowest latency.
 * @param peerStore - The Libp2p PeerStore
 * @param peers - The list of peers to choose from
 * @returns The peer with the lowest latency, or undefined if no peer could be reached
 */
export declare function selectLowestLatencyPeer(peerStore: PeerStore, peers: Peer[]): Promise<Peer | undefined>;
/**
 * Returns the list of peers that supports the given protocol.
 */
export declare function getPeersForProtocol(peerStore: PeerStore, protocols: string[]): Promise<Peer[]>;
/**
 * Returns a peer that supports the given protocol.
 * If peerId is provided, the peer with that id is returned.
 * Otherwise, the peer with the lowest latency is returned.
 * If no peer is found from the above criteria, a random peer is returned.
 */
export declare function selectPeerForProtocol(peerStore: PeerStore, protocols: string[], peerId?: PeerId): Promise<{
    peer: Peer;
    protocol: string;
}>;
export declare function selectConnection(connections: Connection[]): Connection | undefined;
