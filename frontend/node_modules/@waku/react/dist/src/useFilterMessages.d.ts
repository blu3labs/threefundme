import type { IDecodedMessage, IDecoder, IFilter, Waku } from "@waku/interfaces";
import type { HookState } from "./types";
type AbstractFilterNode = Waku & {
    filter: IFilter;
};
type UseFilterMessagesParams = {
    node: undefined | AbstractFilterNode;
    decoder: undefined | IDecoder<IDecodedMessage>;
};
type UseFilterMessagesResult = HookState & {
    messages: IDecodedMessage[];
};
/**
 * Returns messages from Filter subscription and keeps them up to date
 * @example
 * const { isLoading, error, message } = useFilterMessages({node, decoder});
 * @param {Object} node - node that implements Filter, hook does nothing if undefined
 * @param {Object} decoder - decoder to use for subscribing, hook does nothing if undefined
 * @returns {Object} hook state (isLoading, error) and messages array
 */
export declare const useFilterMessages: (params: UseFilterMessagesParams) => UseFilterMessagesResult;
export {};
//# sourceMappingURL=useFilterMessages.d.ts.map