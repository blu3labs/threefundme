import React from "react";
import type { Waku } from "@waku/interfaces";
import type { BootstrapNodeOptions, CrateNodeResult, LightNodeOptions, ReactChildrenProps, RelayNodeOptions } from "./types";
type WakuContextType<T extends Waku> = CrateNodeResult<T>;
/**
 * Hook to retrieve Waku node from Context. By default generic Waku type will be used.
 * @example
 * const { node, isLoading, error } = useWaku<LightNode>();
 * @example
 * const { node, isLoading, error } = useWaku<RelayNode>();
 * @example
 * const { node, isLoading, error } = useWaku<FullNode>();
 * @example
 * const { node, isLoading, error } = useWaku();
 * @returns WakuContext
 */
export declare const useWaku: <T extends Waku>() => WakuContextType<T>;
type ProviderProps<T> = ReactChildrenProps & BootstrapNodeOptions<T>;
/**
 * Provider for creating Light Node based on options passed.
 * @example
 * const App = (props) => (
 *  <LightNodeProvider options={{...}}>
 *      <Component />
 *  </LightNodeProvider>
 * );
 * const Component = (props) => {
 *  const { node, isLoading, error } = useWaku<LightNode>();
 *  ...
 * };
 * @param {Object} props - options to create a node and other React props
 * @param {LightNodeOptions} props.options - optional options for creating Light Node
 * @param {Protocols} props.protocols - optional protocols list to initiate node with
 * @returns React Light Node provider component
 */
export declare const LightNodeProvider: React.FunctionComponent<ProviderProps<LightNodeOptions>>;
/**
 * Provider for creating Relay Node based on options passed.
 * @example
 * const App = (props) => (
 *  <RelayNodeProvider options={{...}}>
 *      <Component />
 *  </RelayNodeProvider>
 * );
 * const Component = (props) => {
 *  const { node, isLoading, error } = useWaku<RelayNode>();
 *  ...
 * };
 * @param {Object} props - options to create a node and other React props
 * @param {RelayNodeOptions} props.options - optional options for creating Relay Node
 * @param {Protocols} props.protocols - optional protocols list to initiate node with
 * @returns React Relay Node provider component
 */
export declare const RelayNodeProvider: React.FunctionComponent<ProviderProps<RelayNodeOptions>>;
export {};
//# sourceMappingURL=WakuProvider.d.ts.map