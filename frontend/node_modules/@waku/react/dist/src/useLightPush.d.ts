import type { IEncoder, ILightPush, IMessage, SendResult, Waku } from "@waku/interfaces";
type AbstractLightPushNode = Waku & {
    lightPush: ILightPush;
};
type UseLightPushParams = {
    encoder: undefined | IEncoder;
    node: undefined | AbstractLightPushNode;
};
type PushFn = (message: IMessage) => Promise<SendResult>;
type UseLightPushResult = {
    push?: undefined | PushFn;
};
/**
 * Returns light push methods bound to node and encoder
 * @param {Object} params.node - node that implements ILightPush, hook does nothing if empty
 * @param {Object} params.encoder - encoder for processing messages, hook does nothing if empty
 * @returns {Object} methods of ILightPush such as push
 */
export declare const useLightPush: (params: UseLightPushParams) => UseLightPushResult;
export {};
//# sourceMappingURL=useLightPush.d.ts.map