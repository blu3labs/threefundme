import type { IDecodedMessage, IDecoder, IProtoMessage } from "@waku/interfaces";
import { TopicOnlyMessage as ProtoTopicOnlyMessage } from "@waku/proto";
export declare class TopicOnlyMessage implements IDecodedMessage {
    pubsubTopic: string;
    private proto;
    payload: Uint8Array;
    rateLimitProof: undefined;
    timestamp: undefined;
    meta: undefined;
    ephemeral: undefined;
    constructor(pubsubTopic: string, proto: ProtoTopicOnlyMessage);
    get contentTopic(): string;
}
export declare class TopicOnlyDecoder implements IDecoder<TopicOnlyMessage> {
    pubsubTopic: string;
    contentTopic: string;
    fromWireToProtoObj(bytes: Uint8Array): Promise<IProtoMessage | undefined>;
    fromProtoObj(pubsubTopic: string, proto: IProtoMessage): Promise<TopicOnlyMessage | undefined>;
}
