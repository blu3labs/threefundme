import { DefaultPubSubTopic } from "@waku/core";
import { TopicOnlyMessage as ProtoTopicOnlyMessage } from "@waku/proto";
export class TopicOnlyMessage {
    pubsubTopic;
    proto;
    payload = new Uint8Array();
    rateLimitProof;
    timestamp;
    meta;
    ephemeral;
    constructor(pubsubTopic, proto) {
        this.pubsubTopic = pubsubTopic;
        this.proto = proto;
    }
    get contentTopic() {
        return this.proto.contentTopic;
    }
}
export class TopicOnlyDecoder {
    pubsubTopic = DefaultPubSubTopic;
    contentTopic = "";
    fromWireToProtoObj(bytes) {
        const protoMessage = ProtoTopicOnlyMessage.decode(bytes);
        return Promise.resolve({
            contentTopic: protoMessage.contentTopic,
            payload: new Uint8Array(),
            rateLimitProof: undefined,
            timestamp: undefined,
            meta: undefined,
            version: undefined,
            ephemeral: undefined
        });
    }
    async fromProtoObj(pubsubTopic, proto) {
        return new TopicOnlyMessage(pubsubTopic, proto);
    }
}
//# sourceMappingURL=topic_only_message.js.map