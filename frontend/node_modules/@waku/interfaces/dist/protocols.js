export var Protocols;
(function (Protocols) {
    Protocols["Relay"] = "relay";
    Protocols["Store"] = "store";
    Protocols["LightPush"] = "lightpush";
    Protocols["Filter"] = "filter";
})(Protocols || (Protocols = {}));
export var SendError;
(function (SendError) {
    /** Could not determine the origin of the fault. Best to check connectivity and try again */
    SendError["GENERIC_FAIL"] = "Generic error";
    /**
     * Failure to protobuf encode the message. This is not recoverable and needs
     * further investigation.
     */
    SendError["ENCODE_FAILED"] = "Failed to encode";
    /**
     * Failure to protobuf decode the message. May be due to a remote peer issue,
     * ensuring that messages are sent via several peer enable mitigation of this error.
     */
    SendError["DECODE_FAILED"] = "Failed to decode";
    /**
     * The message payload is empty, making the message invalid. Ensure that a non-empty
     * payload is set on the outgoing message.
     */
    SendError["EMPTY_PAYLOAD"] = "Payload is empty";
    /**
     * The message size is above the maximum message size allowed on the Waku Network.
     * Compressing the message or using an alternative strategy for large messages is recommended.
     */
    SendError["SIZE_TOO_BIG"] = "Size is too big";
    /**
     * The PubSubTopic passed to the send function is not configured on the Waku node.
     * Please ensure that the PubSubTopic is used when initializing the Waku node.
     */
    SendError["TOPIC_NOT_CONFIGURED"] = "Topic not configured";
    /**
     * Failure to find a peer with suitable protocols. This may due to a connection issue.
     * Mitigation can be: retrying after a given time period, display connectivity issue
     * to user or listening for `peer:connected:bootstrap` or `peer:connected:peer-exchange`
     * on the connection manager before retrying.
     */
    SendError["NO_PEER_AVAILABLE"] = "No peer available";
    /**
     * The remote peer did not behave as expected. Mitigation for `NO_PEER_AVAILABLE`
     * or `DECODE_FAILED` can be used.
     */
    SendError["REMOTE_PEER_FAULT"] = "Remote peer fault";
    /**
     * The remote peer rejected the message. Information provided by the remote peer
     * is logged. Review message validity, or mitigation for `NO_PEER_AVAILABLE`
     * or `DECODE_FAILED` can be used.
     */
    SendError["REMOTE_PEER_REJECTED"] = "Remote peer rejected";
})(SendError || (SendError = {}));
//# sourceMappingURL=protocols.js.map