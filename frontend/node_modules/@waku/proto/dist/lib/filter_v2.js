/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { enumeration, encodeMessage, decodeMessage, message, } from "protons-runtime";
export var FilterSubscribeRequest;
(function (FilterSubscribeRequest) {
    let FilterSubscribeType;
    (function (FilterSubscribeType) {
        FilterSubscribeType["SUBSCRIBER_PING"] = "SUBSCRIBER_PING";
        FilterSubscribeType["SUBSCRIBE"] = "SUBSCRIBE";
        FilterSubscribeType["UNSUBSCRIBE"] = "UNSUBSCRIBE";
        FilterSubscribeType["UNSUBSCRIBE_ALL"] = "UNSUBSCRIBE_ALL";
    })(FilterSubscribeType = FilterSubscribeRequest.FilterSubscribeType || (FilterSubscribeRequest.FilterSubscribeType = {}));
    let __FilterSubscribeTypeValues;
    (function (__FilterSubscribeTypeValues) {
        __FilterSubscribeTypeValues[__FilterSubscribeTypeValues["SUBSCRIBER_PING"] = 0] = "SUBSCRIBER_PING";
        __FilterSubscribeTypeValues[__FilterSubscribeTypeValues["SUBSCRIBE"] = 1] = "SUBSCRIBE";
        __FilterSubscribeTypeValues[__FilterSubscribeTypeValues["UNSUBSCRIBE"] = 2] = "UNSUBSCRIBE";
        __FilterSubscribeTypeValues[__FilterSubscribeTypeValues["UNSUBSCRIBE_ALL"] = 3] = "UNSUBSCRIBE_ALL";
    })(__FilterSubscribeTypeValues || (__FilterSubscribeTypeValues = {}));
    (function (FilterSubscribeType) {
        FilterSubscribeType.codec = () => {
            return enumeration(__FilterSubscribeTypeValues);
        };
    })(FilterSubscribeType = FilterSubscribeRequest.FilterSubscribeType || (FilterSubscribeRequest.FilterSubscribeType = {}));
    let _codec;
    FilterSubscribeRequest.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.requestId != null && obj.requestId !== "") {
                    w.uint32(10);
                    w.string(obj.requestId);
                }
                if (obj.filterSubscribeType != null &&
                    __FilterSubscribeTypeValues[obj.filterSubscribeType] !== 0) {
                    w.uint32(16);
                    FilterSubscribeRequest.FilterSubscribeType.codec().encode(obj.filterSubscribeType, w);
                }
                if (obj.pubsubTopic != null) {
                    w.uint32(82);
                    w.string(obj.pubsubTopic);
                }
                if (obj.contentTopics != null) {
                    for (const value of obj.contentTopics) {
                        w.uint32(90);
                        w.string(value);
                    }
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    requestId: "",
                    filterSubscribeType: FilterSubscribeType.SUBSCRIBER_PING,
                    contentTopics: [],
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.requestId = reader.string();
                            break;
                        case 2:
                            obj.filterSubscribeType =
                                FilterSubscribeRequest.FilterSubscribeType.codec().decode(reader);
                            break;
                        case 10:
                            obj.pubsubTopic = reader.string();
                            break;
                        case 11:
                            obj.contentTopics.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    FilterSubscribeRequest.encode = (obj) => {
        return encodeMessage(obj, FilterSubscribeRequest.codec());
    };
    FilterSubscribeRequest.decode = (buf) => {
        return decodeMessage(buf, FilterSubscribeRequest.codec());
    };
})(FilterSubscribeRequest || (FilterSubscribeRequest = {}));
export var FilterSubscribeResponse;
(function (FilterSubscribeResponse) {
    let _codec;
    FilterSubscribeResponse.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.requestId != null && obj.requestId !== "") {
                    w.uint32(10);
                    w.string(obj.requestId);
                }
                if (obj.statusCode != null && obj.statusCode !== 0) {
                    w.uint32(80);
                    w.uint32(obj.statusCode);
                }
                if (obj.statusDesc != null) {
                    w.uint32(90);
                    w.string(obj.statusDesc);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    requestId: "",
                    statusCode: 0,
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.requestId = reader.string();
                            break;
                        case 10:
                            obj.statusCode = reader.uint32();
                            break;
                        case 11:
                            obj.statusDesc = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    FilterSubscribeResponse.encode = (obj) => {
        return encodeMessage(obj, FilterSubscribeResponse.codec());
    };
    FilterSubscribeResponse.decode = (buf) => {
        return decodeMessage(buf, FilterSubscribeResponse.codec());
    };
})(FilterSubscribeResponse || (FilterSubscribeResponse = {}));
export var MessagePush;
(function (MessagePush) {
    let _codec;
    MessagePush.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.wakuMessage != null) {
                    w.uint32(10);
                    WakuMessage.codec().encode(obj.wakuMessage, w);
                }
                if (obj.pubsubTopic != null) {
                    w.uint32(18);
                    w.string(obj.pubsubTopic);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.wakuMessage = WakuMessage.codec().decode(reader, reader.uint32());
                            break;
                        case 2:
                            obj.pubsubTopic = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    MessagePush.encode = (obj) => {
        return encodeMessage(obj, MessagePush.codec());
    };
    MessagePush.decode = (buf) => {
        return decodeMessage(buf, MessagePush.codec());
    };
})(MessagePush || (MessagePush = {}));
export var RateLimitProof;
(function (RateLimitProof) {
    let _codec;
    RateLimitProof.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.proof != null && obj.proof.byteLength > 0) {
                    w.uint32(10);
                    w.bytes(obj.proof);
                }
                if (obj.merkleRoot != null && obj.merkleRoot.byteLength > 0) {
                    w.uint32(18);
                    w.bytes(obj.merkleRoot);
                }
                if (obj.epoch != null && obj.epoch.byteLength > 0) {
                    w.uint32(26);
                    w.bytes(obj.epoch);
                }
                if (obj.shareX != null && obj.shareX.byteLength > 0) {
                    w.uint32(34);
                    w.bytes(obj.shareX);
                }
                if (obj.shareY != null && obj.shareY.byteLength > 0) {
                    w.uint32(42);
                    w.bytes(obj.shareY);
                }
                if (obj.nullifier != null && obj.nullifier.byteLength > 0) {
                    w.uint32(50);
                    w.bytes(obj.nullifier);
                }
                if (obj.rlnIdentifier != null && obj.rlnIdentifier.byteLength > 0) {
                    w.uint32(58);
                    w.bytes(obj.rlnIdentifier);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    proof: new Uint8Array(0),
                    merkleRoot: new Uint8Array(0),
                    epoch: new Uint8Array(0),
                    shareX: new Uint8Array(0),
                    shareY: new Uint8Array(0),
                    nullifier: new Uint8Array(0),
                    rlnIdentifier: new Uint8Array(0),
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.proof = reader.bytes();
                            break;
                        case 2:
                            obj.merkleRoot = reader.bytes();
                            break;
                        case 3:
                            obj.epoch = reader.bytes();
                            break;
                        case 4:
                            obj.shareX = reader.bytes();
                            break;
                        case 5:
                            obj.shareY = reader.bytes();
                            break;
                        case 6:
                            obj.nullifier = reader.bytes();
                            break;
                        case 7:
                            obj.rlnIdentifier = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    RateLimitProof.encode = (obj) => {
        return encodeMessage(obj, RateLimitProof.codec());
    };
    RateLimitProof.decode = (buf) => {
        return decodeMessage(buf, RateLimitProof.codec());
    };
})(RateLimitProof || (RateLimitProof = {}));
export var WakuMessage;
(function (WakuMessage) {
    let _codec;
    WakuMessage.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.payload != null && obj.payload.byteLength > 0) {
                    w.uint32(10);
                    w.bytes(obj.payload);
                }
                if (obj.contentTopic != null && obj.contentTopic !== "") {
                    w.uint32(18);
                    w.string(obj.contentTopic);
                }
                if (obj.version != null) {
                    w.uint32(24);
                    w.uint32(obj.version);
                }
                if (obj.timestamp != null) {
                    w.uint32(80);
                    w.sint64(obj.timestamp);
                }
                if (obj.meta != null) {
                    w.uint32(90);
                    w.bytes(obj.meta);
                }
                if (obj.rateLimitProof != null) {
                    w.uint32(170);
                    RateLimitProof.codec().encode(obj.rateLimitProof, w);
                }
                if (obj.ephemeral != null) {
                    w.uint32(248);
                    w.bool(obj.ephemeral);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    payload: new Uint8Array(0),
                    contentTopic: "",
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.payload = reader.bytes();
                            break;
                        case 2:
                            obj.contentTopic = reader.string();
                            break;
                        case 3:
                            obj.version = reader.uint32();
                            break;
                        case 10:
                            obj.timestamp = reader.sint64();
                            break;
                        case 11:
                            obj.meta = reader.bytes();
                            break;
                        case 21:
                            obj.rateLimitProof = RateLimitProof.codec().decode(reader, reader.uint32());
                            break;
                        case 31:
                            obj.ephemeral = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    WakuMessage.encode = (obj) => {
        return encodeMessage(obj, WakuMessage.codec());
    };
    WakuMessage.decode = (buf) => {
        return decodeMessage(buf, WakuMessage.codec());
    };
})(WakuMessage || (WakuMessage = {}));
//# sourceMappingURL=filter_v2.js.map