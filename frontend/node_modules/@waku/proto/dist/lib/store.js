/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { encodeMessage, decodeMessage, message, enumeration, } from "protons-runtime";
export var Index;
(function (Index) {
    let _codec;
    Index.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.digest != null && obj.digest.byteLength > 0) {
                    w.uint32(10);
                    w.bytes(obj.digest);
                }
                if (obj.receiverTime != null && obj.receiverTime !== 0n) {
                    w.uint32(16);
                    w.sint64(obj.receiverTime);
                }
                if (obj.senderTime != null && obj.senderTime !== 0n) {
                    w.uint32(24);
                    w.sint64(obj.senderTime);
                }
                if (obj.pubsubTopic != null && obj.pubsubTopic !== "") {
                    w.uint32(34);
                    w.string(obj.pubsubTopic);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    digest: new Uint8Array(0),
                    receiverTime: 0n,
                    senderTime: 0n,
                    pubsubTopic: "",
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.digest = reader.bytes();
                            break;
                        case 2:
                            obj.receiverTime = reader.sint64();
                            break;
                        case 3:
                            obj.senderTime = reader.sint64();
                            break;
                        case 4:
                            obj.pubsubTopic = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Index.encode = (obj) => {
        return encodeMessage(obj, Index.codec());
    };
    Index.decode = (buf) => {
        return decodeMessage(buf, Index.codec());
    };
})(Index || (Index = {}));
export var PagingInfo;
(function (PagingInfo) {
    let Direction;
    (function (Direction) {
        Direction["BACKWARD"] = "BACKWARD";
        Direction["FORWARD"] = "FORWARD";
    })(Direction = PagingInfo.Direction || (PagingInfo.Direction = {}));
    let __DirectionValues;
    (function (__DirectionValues) {
        __DirectionValues[__DirectionValues["BACKWARD"] = 0] = "BACKWARD";
        __DirectionValues[__DirectionValues["FORWARD"] = 1] = "FORWARD";
    })(__DirectionValues || (__DirectionValues = {}));
    (function (Direction) {
        Direction.codec = () => {
            return enumeration(__DirectionValues);
        };
    })(Direction = PagingInfo.Direction || (PagingInfo.Direction = {}));
    let _codec;
    PagingInfo.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.pageSize != null) {
                    w.uint32(8);
                    w.uint64(obj.pageSize);
                }
                if (obj.cursor != null) {
                    w.uint32(18);
                    Index.codec().encode(obj.cursor, w);
                }
                if (obj.direction != null) {
                    w.uint32(24);
                    PagingInfo.Direction.codec().encode(obj.direction, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.pageSize = reader.uint64();
                            break;
                        case 2:
                            obj.cursor = Index.codec().decode(reader, reader.uint32());
                            break;
                        case 3:
                            obj.direction = PagingInfo.Direction.codec().decode(reader);
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    PagingInfo.encode = (obj) => {
        return encodeMessage(obj, PagingInfo.codec());
    };
    PagingInfo.decode = (buf) => {
        return decodeMessage(buf, PagingInfo.codec());
    };
})(PagingInfo || (PagingInfo = {}));
export var ContentFilter;
(function (ContentFilter) {
    let _codec;
    ContentFilter.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.contentTopic != null && obj.contentTopic !== "") {
                    w.uint32(10);
                    w.string(obj.contentTopic);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    contentTopic: "",
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.contentTopic = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    ContentFilter.encode = (obj) => {
        return encodeMessage(obj, ContentFilter.codec());
    };
    ContentFilter.decode = (buf) => {
        return decodeMessage(buf, ContentFilter.codec());
    };
})(ContentFilter || (ContentFilter = {}));
export var HistoryQuery;
(function (HistoryQuery) {
    let _codec;
    HistoryQuery.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.pubsubTopic != null) {
                    w.uint32(18);
                    w.string(obj.pubsubTopic);
                }
                if (obj.contentFilters != null) {
                    for (const value of obj.contentFilters) {
                        w.uint32(26);
                        ContentFilter.codec().encode(value, w);
                    }
                }
                if (obj.pagingInfo != null) {
                    w.uint32(34);
                    PagingInfo.codec().encode(obj.pagingInfo, w);
                }
                if (obj.startTime != null) {
                    w.uint32(40);
                    w.sint64(obj.startTime);
                }
                if (obj.endTime != null) {
                    w.uint32(48);
                    w.sint64(obj.endTime);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    contentFilters: [],
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 2:
                            obj.pubsubTopic = reader.string();
                            break;
                        case 3:
                            obj.contentFilters.push(ContentFilter.codec().decode(reader, reader.uint32()));
                            break;
                        case 4:
                            obj.pagingInfo = PagingInfo.codec().decode(reader, reader.uint32());
                            break;
                        case 5:
                            obj.startTime = reader.sint64();
                            break;
                        case 6:
                            obj.endTime = reader.sint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    HistoryQuery.encode = (obj) => {
        return encodeMessage(obj, HistoryQuery.codec());
    };
    HistoryQuery.decode = (buf) => {
        return decodeMessage(buf, HistoryQuery.codec());
    };
})(HistoryQuery || (HistoryQuery = {}));
export var HistoryResponse;
(function (HistoryResponse) {
    let HistoryError;
    (function (HistoryError) {
        HistoryError["NONE"] = "NONE";
        HistoryError["INVALID_CURSOR"] = "INVALID_CURSOR";
    })(HistoryError = HistoryResponse.HistoryError || (HistoryResponse.HistoryError = {}));
    let __HistoryErrorValues;
    (function (__HistoryErrorValues) {
        __HistoryErrorValues[__HistoryErrorValues["NONE"] = 0] = "NONE";
        __HistoryErrorValues[__HistoryErrorValues["INVALID_CURSOR"] = 1] = "INVALID_CURSOR";
    })(__HistoryErrorValues || (__HistoryErrorValues = {}));
    (function (HistoryError) {
        HistoryError.codec = () => {
            return enumeration(__HistoryErrorValues);
        };
    })(HistoryError = HistoryResponse.HistoryError || (HistoryResponse.HistoryError = {}));
    let _codec;
    HistoryResponse.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.messages != null) {
                    for (const value of obj.messages) {
                        w.uint32(18);
                        WakuMessage.codec().encode(value, w);
                    }
                }
                if (obj.pagingInfo != null) {
                    w.uint32(26);
                    PagingInfo.codec().encode(obj.pagingInfo, w);
                }
                if (obj.error != null && __HistoryErrorValues[obj.error] !== 0) {
                    w.uint32(32);
                    HistoryResponse.HistoryError.codec().encode(obj.error, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    messages: [],
                    error: HistoryError.NONE,
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 2:
                            obj.messages.push(WakuMessage.codec().decode(reader, reader.uint32()));
                            break;
                        case 3:
                            obj.pagingInfo = PagingInfo.codec().decode(reader, reader.uint32());
                            break;
                        case 4:
                            obj.error = HistoryResponse.HistoryError.codec().decode(reader);
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    HistoryResponse.encode = (obj) => {
        return encodeMessage(obj, HistoryResponse.codec());
    };
    HistoryResponse.decode = (buf) => {
        return decodeMessage(buf, HistoryResponse.codec());
    };
})(HistoryResponse || (HistoryResponse = {}));
export var HistoryRpc;
(function (HistoryRpc) {
    let _codec;
    HistoryRpc.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.requestId != null && obj.requestId !== "") {
                    w.uint32(10);
                    w.string(obj.requestId);
                }
                if (obj.query != null) {
                    w.uint32(18);
                    HistoryQuery.codec().encode(obj.query, w);
                }
                if (obj.response != null) {
                    w.uint32(26);
                    HistoryResponse.codec().encode(obj.response, w);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    requestId: "",
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.requestId = reader.string();
                            break;
                        case 2:
                            obj.query = HistoryQuery.codec().decode(reader, reader.uint32());
                            break;
                        case 3:
                            obj.response = HistoryResponse.codec().decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    HistoryRpc.encode = (obj) => {
        return encodeMessage(obj, HistoryRpc.codec());
    };
    HistoryRpc.decode = (buf) => {
        return decodeMessage(buf, HistoryRpc.codec());
    };
})(HistoryRpc || (HistoryRpc = {}));
export var RateLimitProof;
(function (RateLimitProof) {
    let _codec;
    RateLimitProof.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.proof != null && obj.proof.byteLength > 0) {
                    w.uint32(10);
                    w.bytes(obj.proof);
                }
                if (obj.merkleRoot != null && obj.merkleRoot.byteLength > 0) {
                    w.uint32(18);
                    w.bytes(obj.merkleRoot);
                }
                if (obj.epoch != null && obj.epoch.byteLength > 0) {
                    w.uint32(26);
                    w.bytes(obj.epoch);
                }
                if (obj.shareX != null && obj.shareX.byteLength > 0) {
                    w.uint32(34);
                    w.bytes(obj.shareX);
                }
                if (obj.shareY != null && obj.shareY.byteLength > 0) {
                    w.uint32(42);
                    w.bytes(obj.shareY);
                }
                if (obj.nullifier != null && obj.nullifier.byteLength > 0) {
                    w.uint32(50);
                    w.bytes(obj.nullifier);
                }
                if (obj.rlnIdentifier != null && obj.rlnIdentifier.byteLength > 0) {
                    w.uint32(58);
                    w.bytes(obj.rlnIdentifier);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    proof: new Uint8Array(0),
                    merkleRoot: new Uint8Array(0),
                    epoch: new Uint8Array(0),
                    shareX: new Uint8Array(0),
                    shareY: new Uint8Array(0),
                    nullifier: new Uint8Array(0),
                    rlnIdentifier: new Uint8Array(0),
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.proof = reader.bytes();
                            break;
                        case 2:
                            obj.merkleRoot = reader.bytes();
                            break;
                        case 3:
                            obj.epoch = reader.bytes();
                            break;
                        case 4:
                            obj.shareX = reader.bytes();
                            break;
                        case 5:
                            obj.shareY = reader.bytes();
                            break;
                        case 6:
                            obj.nullifier = reader.bytes();
                            break;
                        case 7:
                            obj.rlnIdentifier = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    RateLimitProof.encode = (obj) => {
        return encodeMessage(obj, RateLimitProof.codec());
    };
    RateLimitProof.decode = (buf) => {
        return decodeMessage(buf, RateLimitProof.codec());
    };
})(RateLimitProof || (RateLimitProof = {}));
export var WakuMessage;
(function (WakuMessage) {
    let _codec;
    WakuMessage.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.payload != null && obj.payload.byteLength > 0) {
                    w.uint32(10);
                    w.bytes(obj.payload);
                }
                if (obj.contentTopic != null && obj.contentTopic !== "") {
                    w.uint32(18);
                    w.string(obj.contentTopic);
                }
                if (obj.version != null) {
                    w.uint32(24);
                    w.uint32(obj.version);
                }
                if (obj.timestamp != null) {
                    w.uint32(80);
                    w.sint64(obj.timestamp);
                }
                if (obj.meta != null) {
                    w.uint32(90);
                    w.bytes(obj.meta);
                }
                if (obj.rateLimitProof != null) {
                    w.uint32(170);
                    RateLimitProof.codec().encode(obj.rateLimitProof, w);
                }
                if (obj.ephemeral != null) {
                    w.uint32(248);
                    w.bool(obj.ephemeral);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    payload: new Uint8Array(0),
                    contentTopic: "",
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.payload = reader.bytes();
                            break;
                        case 2:
                            obj.contentTopic = reader.string();
                            break;
                        case 3:
                            obj.version = reader.uint32();
                            break;
                        case 10:
                            obj.timestamp = reader.sint64();
                            break;
                        case 11:
                            obj.meta = reader.bytes();
                            break;
                        case 21:
                            obj.rateLimitProof = RateLimitProof.codec().decode(reader, reader.uint32());
                            break;
                        case 31:
                            obj.ephemeral = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    WakuMessage.encode = (obj) => {
        return encodeMessage(obj, WakuMessage.codec());
    };
    WakuMessage.decode = (buf) => {
        return decodeMessage(buf, WakuMessage.codec());
    };
})(WakuMessage || (WakuMessage = {}));
//# sourceMappingURL=store.js.map