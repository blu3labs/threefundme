import type { Codec } from "protons-runtime";
import type { Uint8ArrayList } from "uint8arraylist";
export interface Index {
    digest: Uint8Array;
    receiverTime: bigint;
    senderTime: bigint;
    pubsubTopic: string;
}
export declare namespace Index {
    const codec: () => Codec<Index>;
    const encode: (obj: Partial<Index>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Index;
}
export interface PagingInfo {
    pageSize?: bigint;
    cursor?: Index;
    direction?: PagingInfo.Direction;
}
export declare namespace PagingInfo {
    enum Direction {
        BACKWARD = "BACKWARD",
        FORWARD = "FORWARD"
    }
    namespace Direction {
        const codec: () => Codec<Direction>;
    }
    const codec: () => Codec<PagingInfo>;
    const encode: (obj: Partial<PagingInfo>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => PagingInfo;
}
export interface ContentFilter {
    contentTopic: string;
}
export declare namespace ContentFilter {
    const codec: () => Codec<ContentFilter>;
    const encode: (obj: Partial<ContentFilter>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => ContentFilter;
}
export interface HistoryQuery {
    pubsubTopic?: string;
    contentFilters: ContentFilter[];
    pagingInfo?: PagingInfo;
    startTime?: bigint;
    endTime?: bigint;
}
export declare namespace HistoryQuery {
    const codec: () => Codec<HistoryQuery>;
    const encode: (obj: Partial<HistoryQuery>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => HistoryQuery;
}
export interface HistoryResponse {
    messages: WakuMessage[];
    pagingInfo?: PagingInfo;
    error: HistoryResponse.HistoryError;
}
export declare namespace HistoryResponse {
    enum HistoryError {
        NONE = "NONE",
        INVALID_CURSOR = "INVALID_CURSOR"
    }
    namespace HistoryError {
        const codec: () => Codec<HistoryError>;
    }
    const codec: () => Codec<HistoryResponse>;
    const encode: (obj: Partial<HistoryResponse>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => HistoryResponse;
}
export interface HistoryRpc {
    requestId: string;
    query?: HistoryQuery;
    response?: HistoryResponse;
}
export declare namespace HistoryRpc {
    const codec: () => Codec<HistoryRpc>;
    const encode: (obj: Partial<HistoryRpc>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => HistoryRpc;
}
export interface RateLimitProof {
    proof: Uint8Array;
    merkleRoot: Uint8Array;
    epoch: Uint8Array;
    shareX: Uint8Array;
    shareY: Uint8Array;
    nullifier: Uint8Array;
    rlnIdentifier: Uint8Array;
}
export declare namespace RateLimitProof {
    const codec: () => Codec<RateLimitProof>;
    const encode: (obj: Partial<RateLimitProof>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => RateLimitProof;
}
export interface WakuMessage {
    payload: Uint8Array;
    contentTopic: string;
    version?: number;
    timestamp?: bigint;
    meta?: Uint8Array;
    rateLimitProof?: RateLimitProof;
    ephemeral?: boolean;
}
export declare namespace WakuMessage {
    const codec: () => Codec<WakuMessage>;
    const encode: (obj: Partial<WakuMessage>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => WakuMessage;
}
