import '../browser-90197c87.js';

/**
 * Return pseudo random subset of the input.
 */
function getPseudoRandomSubset(values, wantedNumber) {
    if (values.length <= wantedNumber || values.length <= 1) {
        return values;
    }
    return shuffle(values).slice(0, wantedNumber);
}
function shuffle(arr) {
    if (arr.length <= 1) {
        return arr;
    }
    const randInt = () => {
        return Math.floor(Math.random() * Math.floor(arr.length));
    };
    for (let i = 0; i < arr.length; i++) {
        const j = randInt();
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    return arr;
}

const DefaultWantedNumber = 1;
var Fleet;
(function (Fleet) {
    Fleet["Prod"] = "prod";
    Fleet["Test"] = "test";
})(Fleet || (Fleet = {}));
/**
 * Return list of pre-defined (hardcoded) bootstrap nodes.
 *
 * Default behavior is to return nodes of the nwaku Status Prod fleet.
 *
 * @param fleet The fleet to be returned. Defaults to production fleet.
 * @param wantedNumber The number of connections desired. Defaults to {@link DefaultWantedNumber}.
 *
 * @returns An array of multiaddresses.
 */
function getPredefinedBootstrapNodes(fleet = Fleet.Prod, wantedNumber = DefaultWantedNumber) {
    if (wantedNumber <= 0) {
        return [];
    }
    let nodes;
    switch (fleet) {
        case Fleet.Prod:
            nodes = fleets.fleets["wakuv2.prod"]["waku-websocket"];
            break;
        case Fleet.Test:
            nodes = fleets.fleets["wakuv2.test"]["waku-websocket"];
            break;
        default:
            nodes = fleets.fleets["wakuv2.prod"]["waku-websocket"];
    }
    nodes = Object.values(nodes);
    return getPseudoRandomSubset(nodes, wantedNumber);
}
const fleets = {
    fleets: {
        "wakuv2.prod": {
            "waku-websocket": {
                "node-01.ac-cn-hongkong-c.wakuv2.prod": "/dns4/node-01.ac-cn-hongkong-c.wakuv2.prod.statusim.net/tcp/8000/wss/p2p/16Uiu2HAm4v86W3bmT1BiH6oSPzcsSr24iDQpSN5Qa992BCjjwgrD",
                "node-01.do-ams3.wakuv2.prod": "/dns4/node-01.do-ams3.wakuv2.prod.statusim.net/tcp/8000/wss/p2p/16Uiu2HAmL5okWopX7NqZWBUKVqW8iUxCEmd5GMHLVPwCgzYzQv3e",
                "node-01.gc-us-central1-a.wakuv2.prod": "/dns4/node-01.gc-us-central1-a.wakuv2.prod.statusim.net/tcp/8000/wss/p2p/16Uiu2HAmVkKntsECaYfefR1V2yCR79CegLATuTPE6B9TxgxBiiiA"
            }
        },
        "wakuv2.test": {
            "waku-websocket": {
                "node-01.ac-cn-hongkong-c.wakuv2.test": "/dns4/node-01.ac-cn-hongkong-c.wakuv2.test.statusim.net/tcp/8000/wss/p2p/16Uiu2HAkvWiyFsgRhuJEb9JfjYxEkoHLgnUQmr1N5mKWnYjxYRVm",
                "node-01.do-ams3.wakuv2.test": "/dns4/node-01.do-ams3.wakuv2.test.statusim.net/tcp/8000/wss/p2p/16Uiu2HAmPLe7Mzm8TsYUubgCAW1aJoeFScxrLj8ppHFivPo97bUZ",
                "node-01.gc-us-central1-a.wakuv2.test": "/dns4/node-01.gc-us-central1-a.wakuv2.test.statusim.net/tcp/8000/wss/p2p/16Uiu2HAmJb2e28qLXxT5kZxVUUoJt72EMzNGXB47Rxx5hw3q4YjS"
            }
        }
    }
};

export { DefaultWantedNumber, Fleet, fleets, getPredefinedBootstrapNodes };
