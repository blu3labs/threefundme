import { proto_store as proto } from "@waku/proto";
import { v4 as uuid } from "uuid";
const OneMillion = BigInt(1000000);
export var PageDirection;
(function (PageDirection) {
    PageDirection["BACKWARD"] = "backward";
    PageDirection["FORWARD"] = "forward";
})(PageDirection || (PageDirection = {}));
export class HistoryRpc {
    proto;
    constructor(proto) {
        this.proto = proto;
    }
    get query() {
        return this.proto.query;
    }
    get response() {
        return this.proto.response;
    }
    /**
     * Create History Query.
     */
    static createQuery(params) {
        const contentFilters = params.contentTopics.map((contentTopic) => {
            return { contentTopic };
        });
        const direction = directionToProto(params.pageDirection);
        const pagingInfo = {
            pageSize: BigInt(params.pageSize),
            cursor: params.cursor,
            direction
        };
        let startTime, endTime;
        if (params.startTime) {
            // milliseconds 10^-3 to nanoseconds 10^-9
            startTime = BigInt(params.startTime.valueOf()) * OneMillion;
        }
        if (params.endTime) {
            // milliseconds 10^-3 to nanoseconds 10^-9
            endTime = BigInt(params.endTime.valueOf()) * OneMillion;
        }
        return new HistoryRpc({
            requestId: uuid(),
            query: {
                pubsubTopic: params.pubsubTopic,
                contentFilters,
                pagingInfo,
                startTime,
                endTime
            },
            response: undefined
        });
    }
    decode(bytes) {
        const res = proto.HistoryRpc.decode(bytes);
        return new HistoryRpc(res);
    }
    encode() {
        return proto.HistoryRpc.encode(this.proto);
    }
}
function directionToProto(pageDirection) {
    switch (pageDirection) {
        case PageDirection.BACKWARD:
            return proto.PagingInfo.Direction.BACKWARD;
        case PageDirection.FORWARD:
            return proto.PagingInfo.Direction.FORWARD;
        default:
            return proto.PagingInfo.Direction.BACKWARD;
    }
}
//# sourceMappingURL=history_rpc.js.map