import type { Libp2p } from "@libp2p/interface";
import type { Stream } from "@libp2p/interface/connection";
import type { PeerId } from "@libp2p/interface/peer-id";
import { Peer, PeerStore } from "@libp2p/interface/peer-store";
import type { IBaseProtocol, Libp2pComponents } from "@waku/interfaces";
import { StreamManager } from "./stream_manager.js";
/**
 * A class with predefined helpers, to be used as a base to implement Waku
 * Protocols.
 */
export declare class BaseProtocol implements IBaseProtocol {
    multicodec: string;
    private components;
    readonly addLibp2pEventListener: Libp2p["addEventListener"];
    readonly removeLibp2pEventListener: Libp2p["removeEventListener"];
    protected streamManager: StreamManager;
    constructor(multicodec: string, components: Libp2pComponents);
    protected getStream(peer: Peer): Promise<Stream>;
    get peerStore(): PeerStore;
    /**
     * Returns known peers from the address book (`libp2p.peerStore`) that support
     * the class protocol. Waku may or may not be currently connected to these
     * peers.
     */
    peers(): Promise<Peer[]>;
    protected getPeer(peerId?: PeerId): Promise<Peer>;
    /**
     * Retrieves a list of peers based on the specified criteria.
     *
     * @param numPeers - The total number of peers to retrieve. If 0, all peers are returned.
     * @param maxBootstrapPeers - The maximum number of bootstrap peers to retrieve.
     * @returns A Promise that resolves to an array of peers based on the specified criteria.
     */
    protected getPeers({ numPeers, maxBootstrapPeers }?: {
        numPeers: number;
        maxBootstrapPeers: number;
    }): Promise<Peer[]>;
}
