import { Logger } from "@waku/utils";
import { selectConnection } from "@waku/utils/libp2p";
export class StreamManager {
    multicodec;
    getConnections;
    addEventListener;
    streamPool;
    log;
    constructor(multicodec, getConnections, addEventListener) {
        this.multicodec = multicodec;
        this.getConnections = getConnections;
        this.addEventListener = addEventListener;
        this.log = new Logger(`stream-manager:${multicodec}`);
        this.addEventListener("peer:update", this.handlePeerUpdateStreamPool.bind(this));
        this.getStream = this.getStream.bind(this);
        this.streamPool = new Map();
    }
    async getStream(peer) {
        const peerIdStr = peer.id.toString();
        const streamPromise = this.streamPool.get(peerIdStr);
        if (!streamPromise) {
            return this.newStream(peer); // fallback by creating a new stream on the spot
        }
        // We have the stream, let's remove it from the map
        this.streamPool.delete(peerIdStr);
        this.prepareNewStream(peer);
        const stream = await streamPromise;
        if (!stream || stream.status === "closed") {
            return this.newStream(peer); // fallback by creating a new stream on the spot
        }
        return stream;
    }
    async newStream(peer) {
        const connections = this.getConnections(peer.id);
        const connection = selectConnection(connections);
        if (!connection) {
            throw new Error("Failed to get a connection to the peer");
        }
        return connection.newStream(this.multicodec);
    }
    prepareNewStream(peer) {
        const streamPromise = this.newStream(peer).catch(() => {
            // No error thrown as this call is not triggered by the user
            this.log.error(`Failed to prepare a new stream for ${peer.id.toString()}`);
        });
        this.streamPool.set(peer.id.toString(), streamPromise);
    }
    handlePeerUpdateStreamPool = (evt) => {
        const peer = evt.detail.peer;
        if (peer.protocols.includes(this.multicodec)) {
            this.log.info(`Preemptively opening a stream to ${peer.id.toString()}`);
            this.prepareNewStream(peer);
        }
    };
}
//# sourceMappingURL=stream_manager.js.map