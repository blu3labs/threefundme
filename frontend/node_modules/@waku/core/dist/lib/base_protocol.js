import { getPeersForProtocol, selectPeerForProtocol } from "@waku/utils/libp2p";
import { filterPeers } from "./filterPeers.js";
import { StreamManager } from "./stream_manager.js";
/**
 * A class with predefined helpers, to be used as a base to implement Waku
 * Protocols.
 */
export class BaseProtocol {
    multicodec;
    components;
    addLibp2pEventListener;
    removeLibp2pEventListener;
    streamManager;
    constructor(multicodec, components) {
        this.multicodec = multicodec;
        this.components = components;
        this.addLibp2pEventListener = components.events.addEventListener.bind(components.events);
        this.removeLibp2pEventListener = components.events.removeEventListener.bind(components.events);
        this.streamManager = new StreamManager(multicodec, components.connectionManager.getConnections.bind(components.connectionManager), this.addLibp2pEventListener);
    }
    async getStream(peer) {
        return this.streamManager.getStream(peer);
    }
    get peerStore() {
        return this.components.peerStore;
    }
    /**
     * Returns known peers from the address book (`libp2p.peerStore`) that support
     * the class protocol. Waku may or may not be currently connected to these
     * peers.
     */
    async peers() {
        return getPeersForProtocol(this.peerStore, [this.multicodec]);
    }
    async getPeer(peerId) {
        const { peer } = await selectPeerForProtocol(this.peerStore, [this.multicodec], peerId);
        return peer;
    }
    /**
     * Retrieves a list of peers based on the specified criteria.
     *
     * @param numPeers - The total number of peers to retrieve. If 0, all peers are returned.
     * @param maxBootstrapPeers - The maximum number of bootstrap peers to retrieve.
     * @returns A Promise that resolves to an array of peers based on the specified criteria.
     */
    async getPeers({ numPeers, maxBootstrapPeers } = {
        maxBootstrapPeers: 1,
        numPeers: 0
    }) {
        // Retrieve all peers that support the protocol
        const allPeersForProtocol = await getPeersForProtocol(this.peerStore, [
            this.multicodec
        ]);
        // Filter the peers based on the specified criteria
        return filterPeers(allPeersForProtocol, numPeers, maxBootstrapPeers);
    }
}
//# sourceMappingURL=base_protocol.js.map