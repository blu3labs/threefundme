import type { Stream } from "@libp2p/interface/connection";
import { PeerId } from "@libp2p/interface/peer-id";
import { MultiaddrInput } from "@multiformats/multiaddr";
import type { IFilter, ILightPush, IRelay, IStore, Libp2p, PubSubTopic, Waku } from "@waku/interfaces";
import { Protocols } from "@waku/interfaces";
import { ConnectionManager } from "./connection_manager.js";
export declare const DefaultPingKeepAliveValueSecs: number;
export declare const DefaultRelayKeepAliveValueSecs: number;
export declare const DefaultUserAgent = "js-waku";
export interface WakuOptions {
    /**
     * Set keep alive frequency in seconds: Waku will send a `/ipfs/ping/1.0.0`
     * request to each peer after the set number of seconds. Set to 0 to disable.
     *
     * @default {@link @waku/core.DefaultPingKeepAliveValueSecs}
     */
    pingKeepAlive?: number;
    /**
     * Set keep alive frequency in seconds: Waku will send a ping message over
     * relay to each peer after the set number of seconds. Set to 0 to disable.
     *
     * @default {@link @waku/core.DefaultRelayKeepAliveValueSecs}
     */
    relayKeepAlive?: number;
    /**
     * Set the user agent string to be used in identification of the node.
     * @default {@link @waku/core.DefaultUserAgent}
     */
    userAgent?: string;
}
export declare class WakuNode implements Waku {
    readonly pubsubTopics: PubSubTopic[];
    libp2p: Libp2p;
    relay?: IRelay;
    store?: IStore;
    filter?: IFilter;
    lightPush?: ILightPush;
    connectionManager: ConnectionManager;
    constructor(options: WakuOptions, pubsubTopics: PubSubTopic[], libp2p: Libp2p, store?: (libp2p: Libp2p) => IStore, lightPush?: (libp2p: Libp2p) => ILightPush, filter?: (libp2p: Libp2p) => IFilter, relay?: (libp2p: Libp2p) => IRelay);
    /**
     * Dials to the provided peer.
     *
     * @param peer The peer to dial
     * @param protocols Waku protocols we expect from the peer; Defaults to mounted protocols
     */
    dial(peer: PeerId | MultiaddrInput, protocols?: Protocols[]): Promise<Stream>;
    start(): Promise<void>;
    stop(): Promise<void>;
    isStarted(): boolean;
    /**
     * Return the local multiaddr with peer id on which libp2p is listening.
     *
     * @throws if libp2p is not listening on localhost.
     */
    getLocalMultiaddrWithID(): string;
}
